#Const Version      "2017-02-28"
#Const ScriptName   "InfectionTree.Script.txt"


#Const C_LibInfTree_TabName     "InfTreeTab"
#Const C_LibInfTree_FakeRoot    "<fakeroot>"

declare CUILayer G_LibInfTree_Layer;

declare Text[][Text] G_LibInfTree_Graph;
declare Boolean G_LibInfTree_Updated;

declare Vec3 G_LibInfTree_TabPos;
declare Vec2 G_LibInfTree_BackgroundSize;

declare Vec3 G_LibInfTree_RootPos;
declare Vec2 G_LibInfTree_VBoundaries;
declare Vec2 G_LibInfTree_HBoundaries;

declare Real G_LibInfTree_NodeMargin;
declare Real G_LibInfTree_NodeWidth;
declare Real G_LibInfTree_NodeHeight;
declare Real G_LibInfTree_NodeThickness;

Text Private_GenerateManialink() {
    declare TreePos = G_LibInfTree_TabPos.X ^ " "
                    ^ G_LibInfTree_TabPos.Y ^ " "
                    ^ G_LibInfTree_TabPos.Z;

    declare BgSize  = G_LibInfTree_BackgroundSize.X ^ " "
                    ^ G_LibInfTree_BackgroundSize.Y;

    return """
    <framemodel id="node" hidden="true">
        <quad id="background"   posn="0 0 0"  sizen="20 5" halign="center" valign="center" hidden="true" />
        <quad id="parent_arrow" posn="0 0 -1" sizen="0 0"  halign="right"  valign="center" bgcolor="fff7" hidden="true" />
        <label id="player_name" posn="0 0 0"  sizen="20 5" halign="center" valign="center" hidden="true" />
    </framemodel>
    <frame id="tree" posn="{{{TreePos}}}" hidden="true">
        <quad posn="0 0 0" sizen="{{{BgSize}}}" halign="left" valign="top" bgcolor="0007" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
        <frameinstance modelid="node" hidden="true" />
    </frame>

    <script><!--

        #Include "MathLib" as ML
        #Include "TextLib" as TL

        #Const C_FakeRoot       "{{{C_LibInfTree_FakeRoot}}}"
        #Const C_FakeRootPos    <-1024.0, -1024.0, -1024.0>
        #Const C_NodeMargin     {{{G_LibInfTree_NodeMargin}}}
        #Const C_NodeWidth      {{{G_LibInfTree_NodeWidth}}}
        #Const C_NodeHeight     {{{G_LibInfTree_NodeHeight}}}
        #Const C_LineThickness  {{{G_LibInfTree_NodeThickness}}}
        #Const C_RootPos        {{{G_LibInfTree_RootPos}}}
        #Const C_VBoundaries    {{{G_LibInfTree_VBoundaries}}}
        #Const C_HBoundaries    {{{G_LibInfTree_HBoundaries}}}

        declare CMlFrame   G_Tree;
        declare CMlFrame[] G_TreeNodesHeap;
        declare CMlFrame[] G_TreeNodesUsed;

        declare Boolean G_MustRedraw;
        declare Integer G_LastUpdate;
        declare Text[][Text] G_InfectionGraph;
        declare Real[Text] G_InfectionGraphHeight;
        declare Real G_InfectionGraphDepth;
        declare Real G_InfectionGraphWidth;
        declare Real G_OptimalNodeWidth;

        declare Text[Text] G_Login2Name;

        // Taken from:
        // https://github.com/maniaplanet/game-modes/blob/master/Common/Scripts/Libs/Nadeo/TabsClient.Script.txt
        Boolean CanShowTree(CUIConfig UI) {
            declare netread Boolean _TabsLib_UseTabs for UI;
            if(!_TabsLib_UseTabs)
                return False;

            declare Boolean _TabsLib_AltLayerIsVisible for UI;
            declare Text    _TabsLib_CurrentTab        for UI;

            return _TabsLib_AltLayerIsVisible && (_TabsLib_CurrentTab == "{{{C_LibInfTree_TabName}}}");
        }

        Void UpdateLoginMap() {
            foreach(Player in Players) {
                G_Login2Name[Player.Login] = Player.Name;
            }
        }

        Void ClearLoginMap() {
            G_Login2Name.clear();
        }

        Text LoginToName(Text _Login) {
            // If login is not mapped to any name, update the map
            if(!G_Login2Name.existskey(_Login)) {
                UpdateLoginMap();
            }
            // If it's still not mapped, then add login as a name
            if(!G_Login2Name.existskey(_Login)) {
                G_Login2Name[_Login] = _Login;
            }
            return G_Login2Name[_Login];
        }

        CMlQuad Node_Background(CMlFrame _Node) {
            return (_Node.GetFirstChild("background") as CMlQuad);
        }

        CMlLabel Node_PlayerName(CMlFrame _Node) {
            return (_Node.GetFirstChild("player_name") as CMlLabel);
        }

        CMlQuad Node_ParentArrow(CMlFrame _Node) {
            return (_Node.GetFirstChild("parent_arrow") as CMlQuad);
        }

        CMlFrame NewNode() {
            if(G_TreeNodesHeap.count <= 0) {
                return Null;
            }

            declare Integer LastId = G_TreeNodesHeap.count - 1;
            declare CMlFrame Node <=> G_TreeNodesHeap[LastId];
            G_TreeNodesHeap.removekey(LastId);
            G_TreeNodesUsed.add(Node);

            Node.Visible                  = True;
            Node_PlayerName(Node).Visible = True;
            Node_Background(Node).Visible = True;
            return Node;
        }

        Void FreeNode(CMlFrame _Node) {
            Node_Background(_Node).Visible   = False;
            Node_PlayerName(_Node).Visible  = False;
            Node_ParentArrow(_Node).Visible = False;
            _Node.Visible                   = False;
            G_TreeNodesUsed.remove(_Node);
            G_TreeNodesHeap.add(_Node);
        }

        Vec2 MeasureInfectionGraph(Text _Root) {
            declare Real HeightSum = 0.0;
            declare Real MaxDepth  = 0.0;
            if(G_InfectionGraph.existskey(_Root)) {
                declare Text[] Children = G_InfectionGraph[_Root];
                foreach(Child in Children) {
                    declare Vec2 Measures = MeasureInfectionGraph(Child);
                    HeightSum += Measures.X;
                    if(MaxDepth < Measures.Y) {
                        MaxDepth = Measures.Y;
                    }
                }
            }
            if(HeightSum <= 0.0)
                HeightSum = 1.0;
            if(_Root != C_FakeRoot) {
                MaxDepth += 1.0;
            }
            G_InfectionGraphHeight[_Root] = HeightSum;
            return <HeightSum, MaxDepth>;
        }

        Void DrawTree(Vec3 _ParentPos, Vec3 _Pos, Vec2 _HBounds, Text _Root) {
            declare CMlFrame Node;
            if(_ParentPos != C_FakeRootPos || _Root != C_FakeRoot) {
                Node = NewNode();
            }

            if(_ParentPos != C_FakeRootPos) {
                declare Arrow = Node_ParentArrow(Node);
                declare dY    = _Pos.Y - _ParentPos.Y;
                declare dX    = _Pos.X - _ParentPos.X - C_NodeWidth;

                Arrow.RelativePosition.X -= C_NodeWidth / 2.0;
                Arrow.RelativeRotation    = -180.0 * ML::Atan2(dY, dX) / ML::PI();
                Arrow.Size                = <ML::Sqrt(dX*dX + dY*dY), C_LineThickness>;
                Arrow.Visible             = True;
            }

            declare Vec3 ParentPos;
            declare Real ShiftOffset;
            if(_Root != C_FakeRoot) {
                Node.Size                   = <G_OptimalNodeWidth, C_NodeHeight>;
                Node.RelativePosition.X     = _Pos.X;
                Node.RelativePosition.Y     = _Pos.Y;
                Node_PlayerName(Node).Value = LoginToName(_Root);
                Node_Background(Node).Size  = Node.Size;

                ParentPos   = _Pos;
                ShiftOffset = G_OptimalNodeWidth + C_NodeMargin;
            } else {
                ParentPos   = C_FakeRootPos;
                ShiftOffset = 0.0;
            }

            if(!G_InfectionGraph.existskey(_Root))
                return;
            declare Text[] Children = G_InfectionGraph[_Root];
            if(Children.count <= 0)
                return;

            declare TreeHeight    = G_InfectionGraphHeight[_Root] * C_NodeHeight;
            declare BoundedHeight = _HBounds.Y - _HBounds.X;
            declare HeightCooef   = BoundedHeight / TreeHeight;

            declare TopBoundary = _Pos.Y + BoundedHeight / 2.0;
            foreach(Child in Children) {
                declare ChildTreeHeight    = G_InfectionGraphHeight[Child] * C_NodeHeight;
                declare BoundedChildHeight = ChildTreeHeight * HeightCooef;
                declare BottomBoundary     = TopBoundary - BoundedChildHeight;
                declare ChildPos           = <_Pos.X + ShiftOffset, TopBoundary - BoundedChildHeight / 2.0, 0.0>;

                DrawTree(ParentPos, ChildPos, <TopBoundary, BottomBoundary>, Child);

                TopBoundary = BottomBoundary;
            }
        }

        Void Init() {
            G_LastUpdate = 0;
            G_Tree = (Page.GetFirstChild("tree") as CMlFrame);
            G_InfectionGraphWidth = (C_HBoundaries.Y - C_HBoundaries.X);
            foreach(Control in G_Tree.Controls) {
                if(!(Control is CMlFrame))
                    continue;
                G_TreeNodesHeap.add((Control as CMlFrame));
            }
        }

        Void Clear() {
            foreach(Node in G_TreeNodesUsed) {
                FreeNode(Node);
            }
        }

        Void CalcDimensions() {
            declare Measures      = MeasureInfectionGraph(C_FakeRoot);
            G_InfectionGraphDepth = Measures.Y;
            G_OptimalNodeWidth    = G_InfectionGraphWidth / G_InfectionGraphDepth - C_NodeMargin * 2.0;
            if(G_OptimalNodeWidth > G_InfectionGraphWidth / 5.0) {
                G_OptimalNodeWidth = G_InfectionGraphWidth / 5.0;
            }
        }

        Void DisplayTree() {
            if(G_MustRedraw) {
                G_MustRedraw = False;

                Clear();

                if(G_InfectionGraph.count > 0) {
                    CalcDimensions();
                    DrawTree(C_FakeRootPos, C_RootPos, C_VBoundaries, C_FakeRoot);
                }
            }
            if(!G_Tree.Visible)
                G_Tree.Show();
        }

        main() {
            wait(InputPlayer != Null);

            declare netread Integer      Net_LibInfTree_Update for Teams[0];
            declare netread Text[][Text] Net_LibInfTree_Graph  for Teams[0];

            Init();

            while(True) {
                yield;

                declare Integer NewUpdate = Net_LibInfTree_Update;
                if(G_LastUpdate < NewUpdate) {
                    G_LastUpdate     = NewUpdate;
                    G_InfectionGraph = Net_LibInfTree_Graph;

                    if(G_InfectionGraph.count <= 0) {
                        ClearLoginMap();
                    }
                    G_MustRedraw = True;
                }

                if(!PageIsVisible)
                    continue;
                if(!CanShowTree(UI)) {
                    if(G_Tree.Visible)
                        G_Tree.Hide();
                    continue;
                }

                DisplayTree();
            }
        }

    --></script>
""";
}

Text GetScriptVersion() {
    return Version;
}

Text GetScriptName() {
    return ScriptName;
}

Void Load() {
    G_LibInfTree_NodeMargin    = 2.0;
    G_LibInfTree_NodeWidth     = 20.0;
    G_LibInfTree_NodeHeight    = 5.0;
    G_LibInfTree_NodeThickness = 0.25;

    G_LibInfTree_TabPos         = <-95.0, 42.0, 0.0>;
    G_LibInfTree_BackgroundSize = <255.0, 110.0>;

    G_LibInfTree_RootPos     = <
        G_LibInfTree_NodeWidth / 2.0,
        -G_LibInfTree_BackgroundSize.Y / 2.0,
        0.0
    >;
    G_LibInfTree_VBoundaries = <0.0, -G_LibInfTree_BackgroundSize.Y>;
    G_LibInfTree_HBoundaries = <0.0,  G_LibInfTree_BackgroundSize.X>;

    G_LibInfTree_Layer = UIManager.UILayerCreate();
    UIManager.UIAll.UILayers.add(G_LibInfTree_Layer);

    G_LibInfTree_Layer.ManialinkPage = Private_GenerateManialink();
}

Void Infect(Text _VictimLogin, Text _InfectorLogin) {
    declare InfectorLogin = _InfectorLogin;
    if(InfectorLogin == "") {
        InfectorLogin = C_LibInfTree_FakeRoot;
    }
    if(!G_LibInfTree_Graph.existskey(InfectorLogin))
        G_LibInfTree_Graph[InfectorLogin] = Text[];
    G_LibInfTree_Graph[InfectorLogin].add(_VictimLogin);
    G_LibInfTree_Updated = True;
}

Void Infect(Text _VictimLogin) {
    Infect(_VictimLogin, "");
}

// Clear infection tree
Void Clear() {
    G_LibInfTree_Graph.clear();
    G_LibInfTree_Updated = True;
}

Void Loop() {
    if(!G_LibInfTree_Updated)
        return;
    G_LibInfTree_Updated = False;

    declare netwrite Integer      Net_LibInfTree_Update for Teams[0];
    declare netwrite Text[][Text] Net_LibInfTree_Graph  for Teams[0];

    Net_LibInfTree_Update = Now;
    Net_LibInfTree_Graph  = G_LibInfTree_Graph;
}

