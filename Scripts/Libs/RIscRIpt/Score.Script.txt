#Const Version      "2017-03-31"
#Const ScriptName   "Score.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Mode.Script.txt" as Mode
#Include "Libs/Nadeo/ShootMania/Scores.Script.txt" as Scores

declare Boolean G_LibScore_UseLadder;

Text GetScriptVersion() {
    return Version;
}

Text GetScriptName() {
    return ScriptName;
}

Void MatchBegin(Boolean _G_LibScore_UseLadder) {
    Scores::EnablePlayerNegativePoints(True, True, True);

    G_LibScore_UseLadder = _G_LibScore_UseLadder;
    if(G_LibScore_UseLadder)
        Mode::Ladder_OpenMatch_All();
    ClearScores();
}

Void MatchBegin() {
    MatchBegin(True);
}

Void MatchEnd(Boolean UpdateLadder) {
    if(G_LibScore_UseLadder) {
        if(UpdateLadder) {
            foreach(Score in Scores) {
                Score.LadderRankSortValue = - 1 - Score.Points;
            }
            Mode::Ladder_CloseMatch();
        } else {
            Mode::Ladder_CancelMatch();
        }
    }
}

Void MatchEnd() {
    MatchEnd(True);
}

Void ClearScores() {
    Scores::Clear(0); // C_Level_Server
}

Void RoundBegin() {
    foreach(Score in Scores) {
        Scores::Clear(3); // C_Level_Round
    }
}

Void RoundEnd() {
    foreach(Score in Scores) {
        Scores::AffectPlayerRoundToMapPoints(Score);
    }
}

Void AddPoints(CSmPlayer _Player, Integer _Points) {
    if(_Player != Null && _Player.Score != Null) {
        Scores::AddPlayerRoundPoints(_Player.Score, _Points);
    }
}

Void ReducePoints(CSmPlayer _Player, Integer _Points) {
    AddPoints(_Player, -_Points);
}
